// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseURL: string;
};

export type CreateGraphDto = {
  name: string;
  description?: string | null;
  version: string;
  schema: {
    nodes: Array<{
      /**
       * Unique identifier for this node
       */
      id: string;
      /**
       * Template name registered in TemplateRegistry
       */
      template: string;
      /**
       * Template-specific configuration
       */
      config: {
        [key: string]: unknown;
      };
    }>;
    edges?: Array<{
      /**
       * Source node ID
       */
      from: string;
      /**
       * Target node ID
       */
      to: string;
      /**
       * Optional edge label
       */
      label?: string;
    }>;
  };
  metadata?: {
    /**
     * Node coordinates and names by node ID
     */
    nodes?: Array<{
      id: string;
      /**
       * X coordinate of the node
       */
      x?: number;
      /**
       * Y coordinate of the node
       */
      y?: number;
      /**
       * Optional display name for the node
       */
      name?: string;
    }>;
    /**
     * Zoom level for graph display
     */
    zoom?: number;
    /**
     * X coordinate
     */
    x?: number;
    /**
     * Y coordinate
     */
    y?: number;
    [key: string]:
      | unknown
      | Array<{
          id: string;
          /**
           * X coordinate of the node
           */
          x?: number;
          /**
           * Y coordinate of the node
           */
          y?: number;
          /**
           * Optional display name for the node
           */
          name?: string;
        }>
      | number
      | undefined;
  } | null;
  /**
   * If true, graph will be deleted instead of restored after server restart
   */
  temporary?: boolean | null;
};

export type GraphDto = {
  id: string;
  name: string;
  description?: string | null;
  error?: string | null;
  version: string;
  schema: {
    nodes: Array<{
      /**
       * Unique identifier for this node
       */
      id: string;
      /**
       * Template name registered in TemplateRegistry
       */
      template: string;
      /**
       * Template-specific configuration
       */
      config: {
        [key: string]: unknown;
      };
    }>;
    edges?: Array<{
      /**
       * Source node ID
       */
      from: string;
      /**
       * Target node ID
       */
      to: string;
      /**
       * Optional edge label
       */
      label?: string;
    }>;
  };
  status: 'created' | 'running' | 'stopped' | 'error';
  metadata?: {
    /**
     * Node coordinates and names by node ID
     */
    nodes?: Array<{
      id: string;
      /**
       * X coordinate of the node
       */
      x?: number;
      /**
       * Y coordinate of the node
       */
      y?: number;
      /**
       * Optional display name for the node
       */
      name?: string;
    }>;
    /**
     * Zoom level for graph display
     */
    zoom?: number;
    /**
     * X coordinate
     */
    x?: number;
    /**
     * Y coordinate
     */
    y?: number;
    [key: string]:
      | unknown
      | Array<{
          id: string;
          /**
           * X coordinate of the node
           */
          x?: number;
          /**
           * Y coordinate of the node
           */
          y?: number;
          /**
           * Optional display name for the node
           */
          name?: string;
        }>
      | number
      | undefined;
  } | null;
  createdAt: string;
  updatedAt: string;
  /**
   * If true, graph will be deleted instead of restored after server restart
   */
  temporary?: boolean | null;
};

export type UpdateGraphDto = {
  name?: string;
  description?: string | null;
  version?: string;
  schema?: {
    nodes: Array<{
      /**
       * Unique identifier for this node
       */
      id: string;
      /**
       * Template name registered in TemplateRegistry
       */
      template: string;
      /**
       * Template-specific configuration
       */
      config: {
        [key: string]: unknown;
      };
    }>;
    edges?: Array<{
      /**
       * Source node ID
       */
      from: string;
      /**
       * Target node ID
       */
      to: string;
      /**
       * Optional edge label
       */
      label?: string;
    }>;
  };
  metadata?: {
    /**
     * Node coordinates and names by node ID
     */
    nodes?: Array<{
      id: string;
      /**
       * X coordinate of the node
       */
      x?: number;
      /**
       * Y coordinate of the node
       */
      y?: number;
      /**
       * Optional display name for the node
       */
      name?: string;
    }>;
    /**
     * Zoom level for graph display
     */
    zoom?: number;
    /**
     * X coordinate
     */
    x?: number;
    /**
     * Y coordinate
     */
    y?: number;
    [key: string]:
      | unknown
      | Array<{
          id: string;
          /**
           * X coordinate of the node
           */
          x?: number;
          /**
           * Y coordinate of the node
           */
          y?: number;
          /**
           * Optional display name for the node
           */
          name?: string;
        }>
      | number
      | undefined;
  } | null;
  /**
   * If true, graph will be deleted instead of restored after server restart
   */
  temporary?: boolean | null;
};

export type ExecuteTriggerDto = {
  /**
   * Array of messages to send to the trigger
   */
  messages: Array<string>;
  /**
   * Optional thread sub-ID that will be used to create the full thread ID.
   */
  threadSubId?: string;
};

export type ExecuteTriggerResponseDto = {
  /**
   * The thread ID used for this execution
   */
  threadId: string;
  /**
   * The checkpoint namespace for this execution
   */
  checkpointNs?: string;
};

export type TemplateDto = {
  name: string;
  description: string;
  kind: 'runtime' | 'tool' | 'simpleAgent' | 'trigger' | 'resource';
  schema: {
    [key: string]: unknown;
  };
  inputs?: Array<
    | {
        type: 'kind';
        value: 'runtime' | 'tool' | 'simpleAgent' | 'trigger' | 'resource';
        required?: boolean;
        multiple: boolean;
      }
    | {
        type: 'template';
        value: string;
        required?: boolean;
        multiple: boolean;
      }
  >;
  outputs?: Array<
    | {
        type: 'kind';
        value: 'runtime' | 'tool' | 'simpleAgent' | 'trigger' | 'resource';
        required?: boolean;
        multiple: boolean;
      }
    | {
        type: 'template';
        value: string;
        required?: boolean;
        multiple: boolean;
      }
  >;
};

export type ThreadDto = {
  /**
   * Thread ID
   */
  id: string;
  /**
   * Graph ID
   */
  graphId: string;
  /**
   * External thread ID from LangChain
   */
  externalThreadId: string;
  createdAt: string;
  updatedAt: string;
  /**
   * Additional thread metadata
   */
  metadata?: {
    [key: string]: unknown;
  } | null;
};

export type ThreadMessageDto = {
  id: string;
  threadId: string;
  nodeId: string;
  externalThreadId: string;
  createdAt: string;
  updatedAt: string;
  message:
    | {
        /**
         * Message role
         */
        role: 'human';
        /**
         * Message content
         */
        content: string;
        /**
         * Additional message metadata
         */
        additionalKwargs?: {
          [key: string]: unknown;
        };
      }
    | {
        /**
         * Message role
         */
        role: 'ai';
        /**
         * Message content
         */
        content: string;
        /**
         * Message ID
         */
        id?: string;
        /**
         * Tool calls in the message
         */
        toolCalls?: Array<{
          /**
           * Tool name
           */
          name: string;
          /**
           * Tool arguments
           */
          args: {
            [key: string]: unknown;
          };
          /**
           * Tool call type
           */
          type: string;
          /**
           * Tool call ID
           */
          id: string;
        }>;
        /**
         * Additional message metadata
         */
        additionalKwargs?: {
          [key: string]: unknown;
        };
      }
    | {
        /**
         * Message role
         */
        role: 'system';
        /**
         * Message content
         */
        content: string;
        /**
         * Additional message metadata
         */
        additionalKwargs?: {
          [key: string]: unknown;
        };
      }
    | {
        /**
         * Message role
         */
        role: 'tool-shell';
        /**
         * Tool name - shell
         */
        name: 'shell';
        /**
         * Parsed shell execution result
         */
        content: {
          /**
           * Exit code of the shell command
           */
          exitCode: number;
          /**
           * Standard output from the command
           */
          stdout: string;
          /**
           * Standard error from the command
           */
          stderr: string;
          /**
           * The command that was executed
           */
          cmd: string;
          /**
           * Whether the command failed
           */
          fail?: boolean;
        };
        /**
         * Tool call ID
         */
        toolCallId: string;
        /**
         * Additional message metadata
         */
        additionalKwargs?: {
          [key: string]: unknown;
        };
      }
    | {
        /**
         * Message role
         */
        role: 'tool';
        /**
         * Tool name
         */
        name: string;
        /**
         * Parsed tool result as JSON
         */
        content: {
          [key: string]: unknown;
        };
        /**
         * Tool call ID
         */
        toolCallId: string;
        /**
         * Additional message metadata
         */
        additionalKwargs?: {
          [key: string]: unknown;
        };
      };
};

export type GetAllGraphsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/graphs';
};

export type GetAllGraphsResponses = {
  200: Array<GraphDto>;
};

export type GetAllGraphsResponse =
  GetAllGraphsResponses[keyof GetAllGraphsResponses];

export type CreateGraphData = {
  body: CreateGraphDto;
  path?: never;
  query?: never;
  url: '/api/v1/graphs';
};

export type CreateGraphResponses = {
  201: GraphDto;
};

export type CreateGraphResponse =
  CreateGraphResponses[keyof CreateGraphResponses];

export type DeleteGraphData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/graphs/{id}';
};

export type DeleteGraphResponses = {
  200: unknown;
};

export type FindGraphByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/graphs/{id}';
};

export type FindGraphByIdResponses = {
  200: GraphDto;
};

export type FindGraphByIdResponse =
  FindGraphByIdResponses[keyof FindGraphByIdResponses];

export type UpdateGraphData = {
  body: UpdateGraphDto;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/graphs/{id}';
};

export type UpdateGraphResponses = {
  200: GraphDto;
};

export type UpdateGraphResponse =
  UpdateGraphResponses[keyof UpdateGraphResponses];

export type RunGraphData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/graphs/{id}/run';
};

export type RunGraphResponses = {
  201: GraphDto;
};

export type RunGraphResponse = RunGraphResponses[keyof RunGraphResponses];

export type DestroyGraphData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/graphs/{id}/destroy';
};

export type DestroyGraphResponses = {
  201: GraphDto;
};

export type DestroyGraphResponse =
  DestroyGraphResponses[keyof DestroyGraphResponses];

export type ExecuteTriggerData = {
  body: ExecuteTriggerDto;
  path: {
    graphId: string;
    triggerId: string;
  };
  query?: never;
  url: '/api/v1/graphs/{graphId}/triggers/{triggerId}/execute';
};

export type ExecuteTriggerResponses = {
  201: ExecuteTriggerResponseDto;
};

export type ExecuteTriggerResponse =
  ExecuteTriggerResponses[keyof ExecuteTriggerResponses];

export type GetAllTemplatesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/templates';
};

export type GetAllTemplatesResponses = {
  200: Array<TemplateDto>;
};

export type GetAllTemplatesResponse =
  GetAllTemplatesResponses[keyof GetAllTemplatesResponses];

export type GetThreadsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Filter by graph ID
     */
    graphId: string;
    /**
     * Maximum number of threads to return
     */
    limit?: number;
    /**
     * Number of threads to skip
     */
    offset?: number;
  };
  url: '/api/v1/threads';
};

export type GetThreadsResponses = {
  200: Array<ThreadDto>;
};

export type GetThreadsResponse = GetThreadsResponses[keyof GetThreadsResponses];

export type GetThreadByIdData = {
  body?: never;
  path: {
    threadId: string;
  };
  query?: never;
  url: '/api/v1/threads/{threadId}';
};

export type GetThreadByIdResponses = {
  200: ThreadDto;
};

export type GetThreadByIdResponse =
  GetThreadByIdResponses[keyof GetThreadByIdResponses];

export type GetThreadByExternalIdData = {
  body?: never;
  path: {
    externalThreadId: string;
  };
  query?: never;
  url: '/api/v1/threads/external/{externalThreadId}';
};

export type GetThreadByExternalIdResponses = {
  200: ThreadDto;
};

export type GetThreadByExternalIdResponse =
  GetThreadByExternalIdResponses[keyof GetThreadByExternalIdResponses];

export type GetThreadMessagesData = {
  body?: never;
  path: {
    threadId: string;
  };
  query?: {
    /**
     * Filter messages by node ID (agent node)
     */
    nodeId?: string;
    /**
     * Maximum number of messages to return
     */
    limit?: number;
    /**
     * Number of messages to skip
     */
    offset?: number;
  };
  url: '/api/v1/threads/{threadId}/messages';
};

export type GetThreadMessagesResponses = {
  200: Array<ThreadMessageDto>;
};

export type GetThreadMessagesResponse =
  GetThreadMessagesResponses[keyof GetThreadMessagesResponses];
