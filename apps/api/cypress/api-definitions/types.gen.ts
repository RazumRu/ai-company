// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseURL: string;
};

export type CreateGraphDto = {
  name: string;
  description?: string | null;
  version: string;
  schema: {
    nodes: Array<{
      /**
       * Unique identifier for this node
       */
      id: string;
      /**
       * Template name registered in TemplateRegistry
       */
      template: string;
      /**
       * Template-specific configuration
       */
      config: {
        [key: string]: unknown;
      };
    }>;
    edges?: Array<{
      /**
       * Source node ID
       */
      from: string;
      /**
       * Target node ID
       */
      to: string;
      /**
       * Optional edge label
       */
      label?: string;
    }>;
  };
  metadata?: {
    [key: string]: unknown;
  };
};

export type GraphDto = {
  id: string;
  name: string;
  description?: string | null;
  error?: string | null;
  version: string;
  schema: {
    nodes: Array<{
      /**
       * Unique identifier for this node
       */
      id: string;
      /**
       * Template name registered in TemplateRegistry
       */
      template: string;
      /**
       * Template-specific configuration
       */
      config: {
        [key: string]: unknown;
      };
    }>;
    edges?: Array<{
      /**
       * Source node ID
       */
      from: string;
      /**
       * Target node ID
       */
      to: string;
      /**
       * Optional edge label
       */
      label?: string;
    }>;
  };
  status: 'created' | 'running' | 'stopped' | 'error';
  metadata?: {
    [key: string]: unknown;
  };
  createdAt: string;
  updatedAt: string;
};

export type UpdateGraphDto = {
  name?: string;
  description?: string | null;
  version?: string;
  schema?: {
    nodes: Array<{
      /**
       * Unique identifier for this node
       */
      id: string;
      /**
       * Template name registered in TemplateRegistry
       */
      template: string;
      /**
       * Template-specific configuration
       */
      config: {
        [key: string]: unknown;
      };
    }>;
    edges?: Array<{
      /**
       * Source node ID
       */
      from: string;
      /**
       * Target node ID
       */
      to: string;
      /**
       * Optional edge label
       */
      label?: string;
    }>;
  };
  metadata?: {
    [key: string]: unknown;
  };
};

export type ExecuteTriggerDto = {
  /**
   * Array of messages to send to the trigger
   */
  messages: Array<string>;
};

export type GraphMessagesResponseDto = {
  /**
   * Node ID
   */
  nodeId: string;
  /**
   * Array of threads with their messages
   */
  threads: Array<{
    /**
     * Thread ID
     */
    id: string;
    /**
     * Array of messages in this thread
     */
    messages: Array<
      | {
          /**
           * Message role
           */
          role: string;
          /**
           * Message content
           */
          content: string;
          /**
           * Additional message metadata
           */
          additionalKwargs?: {
            [key: string]: unknown;
          };
        }
      | {
          /**
           * Message role
           */
          role: string;
          /**
           * Message content
           */
          content: string;
          /**
           * Message ID
           */
          id?: string;
          /**
           * Tool calls in the message
           */
          toolCalls?: Array<{
            /**
             * Tool name
             */
            name: string;
            /**
             * Tool arguments
             */
            args: {
              [key: string]: unknown;
            };
            /**
             * Tool call type
             */
            type: string;
            /**
             * Tool call ID
             */
            id: string;
          }>;
          /**
           * Additional message metadata
           */
          additionalKwargs?: {
            [key: string]: unknown;
          };
        }
      | {
          /**
           * Message role
           */
          role: string;
          /**
           * Message content
           */
          content: string;
          /**
           * Additional message metadata
           */
          additionalKwargs?: {
            [key: string]: unknown;
          };
        }
      | {
          /**
           * Message role
           */
          role: string;
          /**
           * Tool name - shell
           */
          name: string;
          /**
           * Parsed shell execution result
           */
          content: {
            /**
             * Exit code of the shell command
             */
            exitCode: number;
            /**
             * Standard output from the command
             */
            stdout: string;
            /**
             * Standard error from the command
             */
            stderr: string;
            /**
             * The command that was executed
             */
            cmd: string;
            /**
             * Whether the command failed
             */
            fail?: boolean;
          };
          /**
           * Tool call ID
           */
          toolCallId: string;
          /**
           * Additional message metadata
           */
          additionalKwargs?: {
            [key: string]: unknown;
          };
        }
      | {
          /**
           * Message role
           */
          role: string;
          /**
           * Tool name
           */
          name: string;
          /**
           * Parsed tool result as JSON
           */
          content: {
            [key: string]: unknown;
          };
          /**
           * Tool call ID
           */
          toolCallId: string;
          /**
           * Additional message metadata
           */
          additionalKwargs?: {
            [key: string]: unknown;
          };
        }
    >;
    /**
     * Checkpoint ID
     */
    checkpointId?: string;
  }>;
};

export type TemplateDto = {
  name: string;
  description: string;
  kind: 'runtime' | 'tool' | 'simpleAgent' | 'trigger';
  schema: {
    [key: string]: unknown;
  };
};

export type GetAllGraphsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/graphs';
};

export type GetAllGraphsResponses = {
  200: Array<GraphDto>;
};

export type GetAllGraphsResponse =
  GetAllGraphsResponses[keyof GetAllGraphsResponses];

export type CreateGraphData = {
  body: CreateGraphDto;
  path?: never;
  query?: never;
  url: '/api/v1/graphs';
};

export type CreateGraphResponses = {
  201: GraphDto;
};

export type CreateGraphResponse =
  CreateGraphResponses[keyof CreateGraphResponses];

export type DeleteGraphData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/graphs/{id}';
};

export type DeleteGraphResponses = {
  200: unknown;
};

export type FindGraphByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/graphs/{id}';
};

export type FindGraphByIdResponses = {
  200: GraphDto;
};

export type FindGraphByIdResponse =
  FindGraphByIdResponses[keyof FindGraphByIdResponses];

export type UpdateGraphData = {
  body: UpdateGraphDto;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/graphs/{id}';
};

export type UpdateGraphResponses = {
  200: GraphDto;
};

export type UpdateGraphResponse =
  UpdateGraphResponses[keyof UpdateGraphResponses];

export type RunGraphData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/graphs/{id}/run';
};

export type RunGraphResponses = {
  201: GraphDto;
};

export type RunGraphResponse = RunGraphResponses[keyof RunGraphResponses];

export type DestroyGraphData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/v1/graphs/{id}/destroy';
};

export type DestroyGraphResponses = {
  201: GraphDto;
};

export type DestroyGraphResponse =
  DestroyGraphResponses[keyof DestroyGraphResponses];

export type ExecuteTriggerData = {
  body: ExecuteTriggerDto;
  path: {
    graphId: string;
    triggerId: string;
  };
  query?: never;
  url: '/api/v1/graphs/{graphId}/triggers/{triggerId}/execute';
};

export type ExecuteTriggerResponses = {
  204: void;
};

export type ExecuteTriggerResponse =
  ExecuteTriggerResponses[keyof ExecuteTriggerResponses];

export type GetNodeMessagesData = {
  body?: never;
  path: {
    graphId: string;
    nodeId: string;
  };
  query?: {
    /**
     * Thread ID to filter messages (if not provided, returns all threads)
     */
    threadId?: string;
    /**
     * Maximum number of messages to return per thread
     */
    limit?: number;
  };
  url: '/api/v1/graphs/{graphId}/nodes/{nodeId}/messages';
};

export type GetNodeMessagesResponses = {
  200: GraphMessagesResponseDto;
};

export type GetNodeMessagesResponse =
  GetNodeMessagesResponses[keyof GetNodeMessagesResponses];

export type GetAllTemplatesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/templates';
};

export type GetAllTemplatesResponses = {
  200: Array<TemplateDto>;
};

export type GetAllTemplatesResponse =
  GetAllTemplatesResponses[keyof GetAllTemplatesResponses];
