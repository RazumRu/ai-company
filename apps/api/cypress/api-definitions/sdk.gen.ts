// This file is auto-generated by @hey-api/openapi-ts

import { client } from './client.gen.js';
import type {
  Client,
  Options as Options2,
  TDataShape,
} from './client/index.js';
import type {
  CreateGraphData,
  CreateGraphResponses,
  DeleteGraphData,
  DeleteGraphResponses,
  DeleteThreadData,
  DeleteThreadResponses,
  DestroyGraphData,
  DestroyGraphResponses,
  ExecuteTriggerData,
  ExecuteTriggerResponses,
  FindGraphByIdData,
  FindGraphByIdResponses,
  GetAllGraphsData,
  GetAllGraphsResponses,
  GetAllTemplatesData,
  GetAllTemplatesResponses,
  GetThreadByExternalIdData,
  GetThreadByExternalIdResponses,
  GetThreadByIdData,
  GetThreadByIdResponses,
  GetThreadMessagesData,
  GetThreadMessagesResponses,
  GetThreadsData,
  GetThreadsResponses,
  RunGraphData,
  RunGraphResponses,
  UpdateGraphData,
  UpdateGraphResponses,
} from './types.gen.js';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const getAllGraphs = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllGraphsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllGraphsResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/graphs',
    ...options,
  });
};

export const createGraph = <ThrowOnError extends boolean = false>(
  options: Options<CreateGraphData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CreateGraphResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/graphs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const deleteGraph = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGraphData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteGraphResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/graphs/{id}',
    ...options,
  });
};

export const findGraphById = <ThrowOnError extends boolean = false>(
  options: Options<FindGraphByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    FindGraphByIdResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/graphs/{id}',
    ...options,
  });
};

export const updateGraph = <ThrowOnError extends boolean = false>(
  options: Options<UpdateGraphData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateGraphResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/graphs/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const runGraph = <ThrowOnError extends boolean = false>(
  options: Options<RunGraphData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RunGraphResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/graphs/{id}/run',
    ...options,
  });
};

export const destroyGraph = <ThrowOnError extends boolean = false>(
  options: Options<DestroyGraphData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    DestroyGraphResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/graphs/{id}/destroy',
    ...options,
  });
};

export const executeTrigger = <ThrowOnError extends boolean = false>(
  options: Options<ExecuteTriggerData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    ExecuteTriggerResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/graphs/{graphId}/triggers/{triggerId}/execute',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const getAllTemplates = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllTemplatesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllTemplatesResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/templates',
    ...options,
  });
};

export const getThreads = <ThrowOnError extends boolean = false>(
  options: Options<GetThreadsData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetThreadsResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/threads',
    ...options,
  });
};

export const deleteThread = <ThrowOnError extends boolean = false>(
  options: Options<DeleteThreadData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteThreadResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/threads/{threadId}',
    ...options,
  });
};

export const getThreadById = <ThrowOnError extends boolean = false>(
  options: Options<GetThreadByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetThreadByIdResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/threads/{threadId}',
    ...options,
  });
};

export const getThreadByExternalId = <ThrowOnError extends boolean = false>(
  options: Options<GetThreadByExternalIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetThreadByExternalIdResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/threads/external/{externalThreadId}',
    ...options,
  });
};

export const getThreadMessages = <ThrowOnError extends boolean = false>(
  options: Options<GetThreadMessagesData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetThreadMessagesResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/threads/{threadId}/messages',
    ...options,
  });
};
