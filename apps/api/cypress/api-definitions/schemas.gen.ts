// This file is auto-generated by @hey-api/openapi-ts

export const CreateGraphDtoSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    version: {
      type: 'string',
    },
    schema: {
      type: 'object',
      properties: {
        nodes: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: {
                type: 'string',
              },
              template: {
                type: 'string',
              },
              config: {
                type: 'object',
                propertyNames: {
                  type: 'string',
                },
                additionalProperties: {},
              },
            },
            required: ['id', 'template', 'config'],
          },
        },
        edges: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              from: {
                type: 'string',
              },
              to: {
                type: 'string',
              },
              label: {
                type: 'string',
              },
            },
            required: ['from', 'to'],
          },
        },
      },
      required: ['nodes'],
    },
    metadata: {
      type: 'object',
      propertyNames: {
        type: 'string',
      },
      additionalProperties: {},
      nullable: true,
    },
    temporary: {
      anyOf: [
        {
          default: false,
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
    },
  },
  required: ['name', 'version', 'schema'],
} as const;

export const GraphDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      format: 'uuid',
      pattern:
        '^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$',
    },
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    error: {
      type: 'string',
      nullable: true,
    },
    version: {
      type: 'string',
    },
    schema: {
      type: 'object',
      properties: {
        nodes: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: {
                type: 'string',
              },
              template: {
                type: 'string',
              },
              config: {
                type: 'object',
                propertyNames: {
                  type: 'string',
                },
                additionalProperties: {},
              },
            },
            required: ['id', 'template', 'config'],
          },
        },
        edges: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              from: {
                type: 'string',
              },
              to: {
                type: 'string',
              },
              label: {
                type: 'string',
              },
            },
            required: ['from', 'to'],
          },
        },
      },
      required: ['nodes'],
    },
    status: {
      type: 'string',
      enum: ['created', 'running', 'stopped', 'error'],
    },
    metadata: {
      type: 'object',
      propertyNames: {
        type: 'string',
      },
      additionalProperties: {},
      nullable: true,
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
      pattern:
        '^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
      pattern:
        '^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$',
    },
    temporary: {
      anyOf: [
        {
          default: false,
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
    },
  },
  required: [
    'id',
    'name',
    'version',
    'schema',
    'status',
    'createdAt',
    'updatedAt',
  ],
} as const;

export const UpdateGraphDtoSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    version: {
      type: 'string',
    },
    schema: {
      type: 'object',
      properties: {
        nodes: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: {
                type: 'string',
              },
              template: {
                type: 'string',
              },
              config: {
                type: 'object',
                propertyNames: {
                  type: 'string',
                },
                additionalProperties: {},
              },
            },
            required: ['id', 'template', 'config'],
          },
        },
        edges: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              from: {
                type: 'string',
              },
              to: {
                type: 'string',
              },
              label: {
                type: 'string',
              },
            },
            required: ['from', 'to'],
          },
        },
      },
      required: ['nodes'],
    },
    metadata: {
      type: 'object',
      propertyNames: {
        type: 'string',
      },
      additionalProperties: {},
      nullable: true,
    },
    temporary: {
      anyOf: [
        {
          default: false,
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
    },
  },
} as const;

export const ExecuteTriggerDtoSchema = {
  type: 'object',
  properties: {
    messages: {
      type: 'array',
      minItems: 1,
      items: {
        type: 'string',
      },
    },
    threadSubId: {
      type: 'string',
    },
  },
  required: ['messages'],
} as const;

export const ExecuteTriggerResponseDtoSchema = {
  type: 'object',
  properties: {
    threadId: {
      type: 'string',
    },
    checkpointNs: {
      type: 'string',
    },
  },
  required: ['threadId'],
} as const;

export const GraphMessagesResponseDtoSchema = {
  type: 'object',
  properties: {
    nodeId: {
      type: 'string',
    },
    threads: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          messages: {
            type: 'array',
            items: {
              anyOf: [
                {
                  type: 'object',
                  properties: {
                    role: {
                      type: 'string',
                      const: 'human',
                    },
                    content: {
                      type: 'string',
                    },
                    additionalKwargs: {
                      type: 'object',
                      propertyNames: {
                        type: 'string',
                      },
                      additionalProperties: {},
                    },
                  },
                  required: ['role', 'content'],
                },
                {
                  type: 'object',
                  properties: {
                    role: {
                      type: 'string',
                      const: 'ai',
                    },
                    content: {
                      type: 'string',
                    },
                    id: {
                      type: 'string',
                    },
                    toolCalls: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          name: {
                            type: 'string',
                          },
                          args: {
                            type: 'object',
                            propertyNames: {
                              type: 'string',
                            },
                            additionalProperties: {},
                          },
                          type: {
                            type: 'string',
                          },
                          id: {
                            type: 'string',
                          },
                        },
                        required: ['name', 'args', 'type', 'id'],
                      },
                    },
                    additionalKwargs: {
                      type: 'object',
                      propertyNames: {
                        type: 'string',
                      },
                      additionalProperties: {},
                    },
                  },
                  required: ['role', 'content'],
                },
                {
                  type: 'object',
                  properties: {
                    role: {
                      type: 'string',
                      const: 'system',
                    },
                    content: {
                      type: 'string',
                    },
                    additionalKwargs: {
                      type: 'object',
                      propertyNames: {
                        type: 'string',
                      },
                      additionalProperties: {},
                    },
                  },
                  required: ['role', 'content'],
                },
                {
                  type: 'object',
                  properties: {
                    role: {
                      type: 'string',
                      const: 'tool-shell',
                    },
                    name: {
                      type: 'string',
                      const: 'shell',
                    },
                    content: {
                      type: 'object',
                      properties: {
                        exitCode: {
                          type: 'number',
                        },
                        stdout: {
                          type: 'string',
                        },
                        stderr: {
                          type: 'string',
                        },
                        cmd: {
                          type: 'string',
                        },
                        fail: {
                          type: 'boolean',
                        },
                      },
                      required: ['exitCode', 'stdout', 'stderr', 'cmd'],
                    },
                    toolCallId: {
                      type: 'string',
                    },
                    additionalKwargs: {
                      type: 'object',
                      propertyNames: {
                        type: 'string',
                      },
                      additionalProperties: {},
                    },
                  },
                  required: ['role', 'name', 'content', 'toolCallId'],
                },
                {
                  type: 'object',
                  properties: {
                    role: {
                      type: 'string',
                      const: 'tool',
                    },
                    name: {
                      type: 'string',
                    },
                    content: {
                      type: 'object',
                      propertyNames: {
                        type: 'string',
                      },
                      additionalProperties: {},
                    },
                    toolCallId: {
                      type: 'string',
                    },
                    additionalKwargs: {
                      type: 'object',
                      propertyNames: {
                        type: 'string',
                      },
                      additionalProperties: {},
                    },
                  },
                  required: ['role', 'name', 'content', 'toolCallId'],
                },
              ],
            },
          },
        },
        required: ['id', 'messages'],
      },
    },
  },
  required: ['nodeId', 'threads'],
} as const;

export const TemplateDtoSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    kind: {
      type: 'string',
      enum: ['runtime', 'tool', 'simpleAgent', 'trigger', 'resource'],
    },
    schema: {
      type: 'object',
      propertyNames: {
        type: 'string',
      },
      additionalProperties: {},
    },
  },
  required: ['name', 'description', 'kind', 'schema'],
} as const;
